using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.IO;
using Stolyzer.Framework;

namespace Stolyzer.Indicators {

	public class SonarMomentumFactory : ChartIndicatorFactory, IChartIndicatorFactory 
    {
		public SonarMomentumFactory() { }
		public override IChartIndicator Create() {
			return new SonarMomentum();
		}
		public override string Name { get { return "SonarMomentum"; } }
		public override string ToString() {
			return "Sonar Momentum";
		}
	}
	

    public class SonarMomentum : ChartIndicator
    {
        SonarMomentumConfig _config = new SonarMomentumConfig();
        Series[] _series = new Series[] { };

        public override object Config { get { return _config; } }
        public override Series[] Series { get { return _series; } set { _series = value; } }
        
        public SonarMomentum() { _config = new SonarMomentumConfig(); }

    	 [ReturnDescription(new string[] { "sonar", "signal"})]
        public override double[] Calculate(Series series)
        {
            double ema20 = 0;
            double ema9 = 0;
            double prev_ema20 = 0;
            double prev_ema9 = 0;
            double[] ema20_v = new double[20];
            double[] ema9_v = new double[9];
            int ema9_index = 0;
			Series macd_series = new Series(SeriesType.Line, "Sonar" );
			Series ema9_series = new Series(SeriesType.Line, "Signal" );
            //foreach(Element e in series) {
            double macd = 0;
            for(int i=0;i<series.Count;i++) {
            		IElement e = series[i];
            		ema20_v[i%20] = e.Close;
            		if(i >= 20) {
            			if(i == 20) prev_ema20 = ema20_v.Average();
            			ema20 = (e.Close - prev_ema20) * _config.alpha + prev_ema20;
            			ema20_v[i%20] = ema20;
            			macd = ema20;
            			prev_ema20 = ema20;
						macd_series.Add(new Element(e.Stamp, macd));
            			ema9_v[ema9_index % 9] = macd;
            			if(ema9_index >= 9) {
            				if(ema9_index == 9) prev_ema9 = ema9_v.Average();
            				ema9 = (macd - prev_ema9) * 0.2 + prev_ema9;
            				ema9_v[ema9_index % 9] = ema9;
            				prev_ema9 = ema9;
							ema9_series.Add(new Element(e.Stamp, ema9));
            			}
            			ema9_index++;
            		}
			}
			_series = new Series[] { macd_series, ema9_series  };
            return new double[] { macd, ema9 };
        }

        public override string ToString() {
            return "Sonar Momentum";
        }
    }

    public class SonarMomentumConfig
    {
    	public SonarMomentumConfig() { alpha=0.952; }
    	
    	[DefaultValue(0.952)]
    	[DisplayName("Alpha")]
    	public double alpha{ get; set; }
    }

}
