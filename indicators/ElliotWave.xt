using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ComponentModel;
using System.IO;
using Stolyzer.Framework;

namespace Stolyzer.Indicators {

	public class ElliotWaveFactory : ChartIndicatorFactory, IChartIndicatorFactory 
    {
		public ElliotWaveFactory() { }
		public override IChartIndicator Create() {
			return new ElliotWave();
		}
		public override string Name { get { return "ElliotWave"; } }
		public override string ToString() {
			return "Elliot Wave";
		}
	}
	

    public class ElliotWave : ChartIndicator
    {
        ElliotWaveConfig _config = new ElliotWaveConfig();
        Series[] _series = new Series[] { };

        public override object Config { get { return _config; } }
        public override Series[] Series { get { return _series; } set { _series = value; } }
        
        public ElliotWave() { _config = new ElliotWaveConfig(); }

        public override double[] Calculate(Series series)
        {
        	if(series.Count == 0) return new double[] { 0 };
        	Series line1 = new Series(SeriesType.Scatter, series, "Uptrend");
        	Series line2 = new Series(SeriesType.Scatter, series, "Downtrend");
            IElement e = series[0];
            IElement maxima = e;
        	IElement minima = e;
        	double local_minima = e.Low;
        	double local_maxima = e.High;
            IElement prev_maxima = maxima;
        	IElement prev_minima = minima;
        	while((minima = series.GetLocalMin(minima)) != null && (maxima = series.GetLocalMax(maxima)) != null ) {
        		if(prev_maxima.Close > maxima.Close) {
        			line2.Add(prev_maxima);
        		}
        		if(prev_minima.Close < minima.Close) {
        			line1.Add(prev_minima);
        		}
			prev_maxima = maxima;
			prev_minima = minima;
        	}
            _series = new Series[] { line1, line2 };
            
            return new double[] { local_minima, local_maxima }; 
        }

        public override string ToString() {
            return "Elliot Wave";
        }
    }

    public class ElliotWaveConfig 
    {
        int _period = 20;
	    public ElliotWaveConfig() {  }
	    [DefaultValue(20)]
        [DisplayName("Period")]
        public int Period { get { return _period; } set { _period = value; } }
    }

}